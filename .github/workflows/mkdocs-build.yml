# Define the name of the workflow
name: mkdocs-build

# Define when the workflow should run
on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

# Define environment variables
env:
  PYTHON_VERSION: 3.x

# Define permissions for the workflow
permissions:
  contents: write
  id-token: write
  pages: write

# Define the main job for building with MkDocs
jobs:
  mkdocs-build:
    runs-on: ubuntu-latest
    steps:

      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Python runtime
      - name: Set up Python runtime
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements.txt

      # Set up build cache
      - name: Set up build cache
        uses: actions/cache/restore@v3
        with:
          key: mkdocs-material-${{ hashfiles('.cache/**') }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs-material
          pip install mkdocs-material[recommended,git,imaging]
          pip install mkdocs-glightbox
          pip install pillow
          pip install cairosvg
          pip install mkdocs-git-authors-plugin
          pip install mkdocs-git-committers-plugin-2
          pip install mkdocs-git-revision-date-localized-plugin

      # Install other dependencies
      - name: Install other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pngquant libcairo2-dev libfreetype6-dev libffi-dev libjpeg-dev libpng-dev libz-dev nodejs
          sudo apt-mark hold firefox
          sudo apt-get upgrade -y
          sudo apt-get autoremove -y

      # Build documentation
      - name: Build documentation
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GOOGLE_ANALYTICS_KEY: ${{ secrets.GOOGLE_ANALYTICS_KEY }}
        run: |
          mkdocs get-deps
          mkdocs build --clean
          mkdocs --version

      # Adjust permissions
      - name: Adjust permissions
        run: |
          chmod -c -R +rX site/ | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done

      # Save build cache
      - name: Save build cache
        uses: actions/cache/save@v3
        with:
          key: mkdocs-material-${{ hashfiles('.cache/**') }}
          path: .cache

      # Upload to GitHub Pages
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: site

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2

  # Define a job for link checking
  broken-link-checks:
    runs-on: ubuntu-latest
    needs: mkdocs-build
    steps:
      # Check out the repository
      - name: Checkout repository
      - uses: actions/checkout@v4

      # Use a link checker action
      - name: Broken Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          args: --skip-missing

      # Create an issue if there are broken links
      - name: Create Issue From File
        if: ${{ steps.lychee.outputs.exit_code != 0 }}
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: Link Checker Report
          content-filepath: ./lychee/out.md
          labels: report, automated issue

  # Define a job to clear Cloudflare cache
  cloudflare-cache:
    runs-on: ubuntu-latest
    needs: [mkdocs-build, broken-link-checks]
    steps:

      # Use a Cloudflare cache clearing action
      - name: Clear Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
